class Fraction:

    def __init__(self, numerator, denominator):
        self.numerator = numerator
        self.denominator = denominator

    def display(self):
        print(f'{self.numerator}/{self.denominator}')

    def add(self, other_fraction):
        new_numerator = self.numerator * other_fraction.denominator + other_fraction.numerator * self.denominator
        new_denominator = self.denominator * other_fraction.denominator
        return Fraction(new_numerator, new_denominator)

    def subtract(self, other_fraction):
        new_numerator = self.numerator * other_fraction.denominator - other_fraction.numerator * self.denominator
        new_denominator = self.denominator * other_fraction.denominator
        return Fraction(new_numerator, new_denominator)

    def multiply(self, other_fraction):
        new_numerator = self.numerator * other_fraction.numerator
        new_denominator = self.denominator * other_fraction.denominator
        return Fraction(new_numerator, new_denominator)

    def divide(self, other_fraction):
        new_numerator = self.numerator * other_fraction.denominator
        new_denominator = other_fraction.numerator * self.denominator
        return Fraction(new_numerator, new_denominator)

class TemperatureConventer:
    @staticmethod
    def from_celsius_to_fahrenheit(celsius):
        temperature_in_fahrenheit = (celsius * 9/5) + 32
        return temperature_in_fahrenheit

    @staticmethod
    def from_fahrenheit_to_celsius(fahrenheit):
        temperature_in_celsius = (fahrenheit - 32) * 5/9
        return temperature_in_celsius

class MetricToEnglishConverter:
    @staticmethod
    def kilometers_to_miles(kilometres):
        return kilometres * 0.621371
    @staticmethod
    def miles_to_kilometers(miles):
        return miles * 1.60934
    @staticmethod
    def gallons_to_liters(gallons):
        return gallons * 3.78541
    @staticmethod
    def liters_to_gallons(liters):
        return liters * 0.264172



